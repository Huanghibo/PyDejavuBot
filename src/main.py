# -*- coding: utf-8 -*-
# SCRIPT # ======================================================================================================================
# Name...........: PyDejavuBot - Free Open Source Telegram Bot, designed for recognize a melody.
# File name......: main.py
# Description ...: Main PyDejavuBot's code
# Author ........: ZhymabekRoman
# ===============================================================================================================================

import os
import sys
import shutil    
import logging
import asyncio
import pickle
# Import configuration file
try:
    from user_data import config
except ImportError:
    print("Please first configure config file via script 'first_start.py'")
    sys.exit(1)
from pathlib import Path
from database import SQLighter
from aiogram.utils.callback_data import CallbackData
from aiogram.utils.exceptions import BotBlocked, MessageNotModified
from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.files import JSONStorage
from other import *

# Initalialization API token for work with Telegram Bot
API_TOKEN = base64_decode(config.API_TOKEN)

# Configure Memory Storage
memory_storage = JSONStorage(config.FSM_FILE_STORAGE)

# Configure logging
logging.basicConfig(level=logging.INFO)
# logging.basicConfig(level=logging.DEBUG) 

# Initialize bot and dispatcher
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=memory_storage)

# Initialize connection with db
db = SQLighter(config.DATABASE_PATH)

# Initialize callback data factory
language_cb = CallbackData("language_settings", "language_code")
manage_folder_cb = CallbackData("manage_folder_menu", "folder_name")
remove_folder_cb = CallbackData("remove_folder_message", "folder_name")
remove_folder_process_cb = CallbackData("remove_folder_process", "folder_name")
upload_audio_sample_cb = CallbackData("upload_audio_sample_message", "folder_name")
remove_audio_sample_cb = CallbackData("remove_audio_sample_message", "folder_name")
recognize_query_cb = CallbackData("recognize_query_message", "folder_name")

AVAILABLE_LANGUAGES = {
        "En": {'flag': "üá∫üá∏", 'name': "English"},
        "Ru": {'flag': "üá∑üá∫", 'name': "–†—É—Å—Å–∫–∏–π"}
    }

class CreateFolder(StatesGroup):
    step_1 = State()
    step_2 = State()
class Upload_Sample(StatesGroup):
    step_1 = State()
    step_2 = State()
class RemoveSample(StatesGroup):
    step_1 = State()
class UploadQuery(StatesGroup):
    step_1 = State()

curent_folder_name = {}

def get_selected_folder_name(user_id):
    global curent_folder_name
    return str(curent_folder_name[user_id])

def set_selected_folder_name(user_id, set_name):
    global curent_folder_name
    curent_folder_name[user_id] = str(set_name)

def unset_selected_folder_name(user_id):
    global curent_folder_name
    curent_folder_name[user_id] = str("")

async def download_file(message, file_id, destination) -> types.Message:
    message_text = message.text + "\n\n–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞..."
    await message.edit_text(message_text + " –í—ã–ø–æ–ª–Ω—è–µ–º...")
    try:
        await bot.download_file_by_id(file_id, destination)
        assert os.path.exists(destination)
    except Exception as ex:
        managment_msg = await message.edit_text(message_text + " –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞, –æ—Ç–º–µ–Ω–∞...")
        raise
    else:
        managment_msg = await message.edit_text(message_text + " –ì–æ—Ç–æ–≤–æ ‚úÖ")
    return managment_msg

async def audio_processing(message, input_file, output_file) -> types.Message:
    message_text = message.text + "\n\n–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å, –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç mp3 —á–µ—Ä–µ–∑ ffmpeg..."
    await message.edit_text(message_text + " –í—ã–ø–æ–ª–Ω—è–µ–º...")
    try:
        cmd = ['ffmpeg-normalize', '-q', '-vn', input_file, '-c:a', 'libmp3lame', '-o', output_file]
        proc = await asyncio.create_subprocess_exec(*cmd, stdout=asyncio.subprocess.PIPE,stderr=asyncio.subprocess.PIPE)
        stdout, stderr = await proc.communicate()
        logging.info(f'[{cmd!r} exited with {proc.returncode}]')
        logging.info(f'[stdout]\n{stdout.decode()}')
        logging.info(f'[stderr]\n{stderr.decode()}')
        assert os.path.exists(output_file)
        assert proc.returncode == 0
    except Exception as ex:
        managment_msg = await message.edit_text(message_text + " –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞, –æ—Ç–º–µ–Ω–∞...")
        raise
    else:
        managment_msg = await message.edit_text(message_text + " –ì–æ—Ç–æ–≤–æ ‚úÖ")
    return managment_msg

async def register_audio_hashes(message, input_file, fingerprint_db) -> types.Message:
    message_text = message.text + "\n\n–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∞—É–¥–∏–æ —Ö—ç—à–∏ –≤ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö..."
    await message.edit_text(message_text + " –í—ã–ø–æ–ª–Ω—è–µ–º...")
    try:
        
        if os.path.exists(fingerprint_db) is False:
            db_hashes_add_method = 'new'
        elif os.path.exists(fingerprint_db) is True:
            db_hashes_add_method = 'add'
            
        if config.audfprint_mode == '0':
            cmd = ['python3', 'library/audfprint-master/audfprint.py', db_hashes_add_method, '-d', fingerprint_db, input_file, '-n', '120', '-X', '-F', '18']
        elif config.audfprint_mode == '1':
            cmd = ['python3', 'library/audfprint-master/audfprint.py', db_hashes_add_method, '-d', fingerprint_db, input_file]
        
        proc = await asyncio.create_subprocess_exec(*cmd, stdout=asyncio.subprocess.PIPE,stderr=asyncio.subprocess.PIPE)
        stdout, stderr = await proc.communicate()
        logging.info(f'[{cmd!r} exited with {proc.returncode}]')
        logging.info(f'[stdout]\n{stdout.decode()}')
        logging.info(f'[stderr]\n{stderr.decode()}')
        assert os.path.exists(fingerprint_db)
        assert proc.returncode == 0
    except Exception as ex:
        managment_msg = await message.edit_text(message_text + " –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞, –æ—Ç–º–µ–Ω–∞...")
        raise
    else:
        managment_msg = await message.edit_text(message_text + " –ì–æ—Ç–æ–≤–æ ‚úÖ")
    return managment_msg
    
async def match_audio_query(message, input_file, fingerprint_db) -> types.Message:
    message_text = message.text + "\n\n–ò—â–µ–º –∞—É–¥–∏–æ —Ö—ç—à–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö..."
    await message.edit_text(message_text + " –í—ã–ø–æ–ª–Ω—è–µ–º...")
    try:
        if config.audfprint_mode == '0':
            cmd = ['python3', 'library/audfprint-master/audfprint.py', 'match', '-d', fingerprint_db, input_file, '-n', '120', '-D', '2000', '-X', '-F', '18']
        elif config.audfprint_mode == '1':
            cmd = ['python3', 'library/audfprint-master/audfprint.py', 'match', '-d', fingerprint_db, input_file]
        proc = await asyncio.create_subprocess_exec(*cmd, stdout=asyncio.subprocess.PIPE,stderr=asyncio.subprocess.PIPE)
        stdout, stderr = await proc.communicate()
        logging.info(f'[{cmd!r} exited with {proc.returncode}]')
        logging.info(f'[stdout]\n{stdout.decode()}')
        logging.info(f'[stderr]\n{stderr.decode()}')
        assert os.path.exists(fingerprint_db)
        assert proc.returncode == 0
    except Exception as ex:
        managment_msg = await message.edit_text(message_text + " –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞, –æ—Ç–º–µ–Ω–∞...")
        raise
    else:
        managment_msg = await message.edit_text(message_text + f" –ì–æ—Ç–æ–≤–æ ‚úÖ\n\n–†–µ–∑—É–ª—å—Ç–∞—Ç:\n{stdout.decode()}\n")
    return managment_msg

async def delete_audio_hashes(message, fingerprint_db, sample_name) -> types.Message:
    message_text = message.text + "\n\n–£–¥–∞–ª—è–µ–º –∞—É–¥–∏–æ —Ö—ç—à–∏..."
    await message.edit_text(message_text + " –í—ã–ø–æ–ª–Ω—è–µ–º...")
    try:
        cmd = ['python3', 'library/audfprint-master/audfprint.py', 'remove', '-d', fingerprint_db, sample_name, '-H', '2']
        proc = await asyncio.create_subprocess_exec(*cmd, stdout=asyncio.subprocess.PIPE,stderr=asyncio.subprocess.PIPE)
        stdout, stderr = await proc.communicate()
        logging.info(f'[{cmd!r} exited with {proc.returncode}]')
        logging.info(f'[stdout]\n{stdout.decode()}')
        logging.info(f'[stderr]\n{stderr.decode()}')
        assert os.path.exists(fingerprint_db)
        assert proc.returncode == 0
    except Exception as ex:
       managment_msg = await message.edit_text(message_text + " –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞, –æ—Ç–º–µ–Ω–∞...")
       raise
    else:
        managment_msg = await message.edit_text(message_text + " –ì–æ—Ç–æ–≤–æ ‚úÖ")
    return managment_msg

@dp.message_handler(commands=['start'], state='*')
async def start_cmd_message(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑—ã–≤–∞—Ç–µ–ª—è –≤ –ë–î
    # –ï—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Ç–æ–≥–¥–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º ID –ø–æ–ª—å–∑—ã–≤–∞—Ç–µ–ª—è –≤ –ë–î –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è —è–∑—ã–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    if db.select_user_data(message.chat.id) is None:
        db.create_empety_user_data(message.chat.id, message.from_user.username)
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–∑—ã–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≤ –ë–î
    # –ï—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Ç–æ–≥–¥–∞ –ø–æ—Å—ã–ª–≤–∞–µ—Ç —é–∑–µ—Ä—É —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–±–æ—Ä–µ —è–∑—ã–∫–∞
    if not db.get_user_lang(message.chat.id):
        await language_settings_message(message, 'start')
    else:
        await main_menu_message(message, 'reply')

async def main_menu_message(message: types.Message, messaging_type):
    keyboard_markup = types.InlineKeyboardMarkup()
    folder_list_btns = types.InlineKeyboardButton('–ü–∞–ø–∫–∏ üìÇ', callback_data= 'folders_list')
    about_btns = types.InlineKeyboardButton('–û –±–æ—Ç–µ ü§ñ', callback_data= 'about_bot_message')
    setings_btns = types.InlineKeyboardButton('–ù–∞—Å—Ç—Ä–æ–π–∫–∏  üéõÔ∏è', callback_data= 'bot_settings_message')
    #quiz_mode_btn = types.InlineKeyboardButton('–†–∞—Å–ø–æ–∑–Ω–∞—Ç—å üîéüéµ', callback_data= 'quiz_mode_0')
    keyboard_markup.row(folder_list_btns)
    keyboard_markup.row(about_btns, setings_btns)
    #keyboard_markup.row(quiz_mode_btn)
    if messaging_type == 'edit':
        await message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é : ", reply_markup=keyboard_markup)
    elif messaging_type == 'reply':
        await message.reply("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é : ", reply_markup=keyboard_markup)

@dp.callback_query_handler(lambda c: c.data == 'bot_settings_message')
async def bot_settings_message(callback_query: types.CallbackQuery):
    keyboard_markup = types.InlineKeyboardMarkup()
    back_btn = types.InlineKeyboardButton('¬´      ', callback_data= 'welcome_message')
    lang_btn = types.InlineKeyboardButton(f'–Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ : {db.get_user_lang(callback_query.message.chat.id)}', callback_data= 'edit_lang')
    keyboard_markup.row(lang_btn)
    keyboard_markup.row(back_btn)
    await callback_query.message.edit_text("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞:", reply_markup=keyboard_markup)
    await bot.answer_callback_query(callback_query.id)

@dp.callback_query_handler(lambda c: c.data == 'about_bot_message')
async def about_bot_message(call: types.CallbackQuery):
    await process_help_command_1(call.message, "edit")

async def language_settings_message(message: types.Message, messaging_type= 'start'):
    keyboard = types.InlineKeyboardMarkup()
    for lang_code, lang_info in AVAILABLE_LANGUAGES.items():
        language_label = f"{lang_info['flag']} {lang_info['name']}"
        button = types.InlineKeyboardButton(text=language_label, callback_data=language_cb.new(lang_code))
        keyboard.add(button)
    message_text = "Please select your language:"
    if messaging_type == 'start':
        await message.reply(message_text, reply_markup=keyboard)
    elif messaging_type == 'edit':
        await message.edit_text(message_text, reply_markup=keyboard)

@dp.callback_query_handler(language_cb.filter(), state='*')
async def set_language_message(call: types.CallbackQuery, callback_data: dict):
    selected_language_code = callback_data['language_code']
    
    if selected_language_code != "Ru":
        await call.answer("–í –¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫", True)
        return 
        
    db.set_user_lang(call.message.chat.id, selected_language_code)
    await call.answer(f"üéö–ù–∞—Å—Ç—Ä–æ–π–∫–∏ : –í—ã–±—Ä–∞–Ω {selected_language_code} —è–∑—ã–∫!")
    await process_help_command_1(call.message, "edit")

async def folder_list_menu_message(message: types.Message, messaging_type):
    unset_selected_folder_name(message.chat.id)
    
    keyboard_markup = types.InlineKeyboardMarkup()
    create_new_folder_btn = types.InlineKeyboardButton('–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ø–∞–ø–∫—É üóÇ', callback_data='create_new_folder')
    keyboard_markup.row(create_new_folder_btn)
    
    for folder_name in db.select_user_folders_list(message.chat.id):
        get_sample_count = len(db.select_user_audio_samples_list(message.chat.id, folder_name))
        folder_btn = types.InlineKeyboardButton(f"{folder_name} ({get_sample_count})", callback_data=manage_folder_cb.new(folder_name))
        keyboard_markup.row(folder_btn)
 
    back_btn = types.InlineKeyboardButton('¬´      ', callback_data= 'welcome_message')
    keyboard_markup.row(back_btn)
    
    if messaging_type == 'start':
        await message.answer(f"–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–∞–ø–æ–∫ :\n\n–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–ø–æ–∫: {db.user_folders_count(message.chat.id)}", reply_markup=keyboard_markup)
    elif messaging_type == 'edit':
        await message.edit_text(f"–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–∞–ø–æ–∫ :\n\n–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–ø–æ–∫: {db.user_folders_count(message.chat.id)}", reply_markup=keyboard_markup)
    
async def create_folder_step_1_message(message: types.Message):
    keyboard_markup = types.InlineKeyboardMarkup()
    back_btn = types.InlineKeyboardButton('¬´      ', callback_data = 'folders_list')
    keyboard_markup.row(back_btn)
    await message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –ø–∞–ø–∫–∏ : ", reply_markup=keyboard_markup)   
    await CreateFolder.step_1.set()

@dp.message_handler(state=CreateFolder.step_1, content_types=types.ContentTypes.TEXT)
async def create_folder_step_2_message(message: types.Message, state: FSMContext):
    async with state.proxy() as user_data:
        user_data['folder_name'] = message.text.replace('\n',' ')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –ø–∞–ø–∫–∏
    if len(user_data['folder_name']) >= 20:
        keyboard_markup = types.InlineKeyboardMarkup()
        back_btn = types.InlineKeyboardButton('¬´      ', callback_data = 'folders_list')
        keyboard_markup.row(back_btn)
        await message.reply('–ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 20 —Å–∏–º–≤–æ–ª–æ–≤', reply_markup=keyboard_markup)
        return
    # –ò—â–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω–æ–π –ø–∞–ø–∫–∏ –≤ –ë–î 
    if user_data['folder_name'].lower() in [x.lower() for x in db.select_user_folders_list(message.chat.id)]:
        keyboard_markup = types.InlineKeyboardMarkup()
        back_btn = types.InlineKeyboardButton('¬´      ', callback_data = 'folders_list')
        keyboard_markup.row(back_btn)
        await message.reply('–î–∞–Ω–Ω–∞—è –ø–∞–ø–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è', reply_markup=keyboard_markup)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –Ω–∞ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
    if check_string_for_except_chars(user_data['folder_name']):
        keyboard_markup = types.InlineKeyboardMarkup()
        back_btn = types.InlineKeyboardButton('¬´      ', callback_data = 'folders_list')
        keyboard_markup.row(back_btn)
        await message.reply(f'–ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ "{user_data["folder_name"]}" —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã: {check_string_for_except_chars(user_data["folder_name"])}', reply_markup=keyboard_markup)
        return 
    
    await state.finish()
    
    path_list = path(message.chat.id, user_data['folder_name'])
    os.makedirs(path_list.tmp_audio_samples())
    os.makedirs(path_list.processed_audio_samples())
    os.makedirs(path_list.tmp_query_audio())
    os.makedirs(path_list.processed_query_audio())
    os.makedirs(path_list.fingerprint_db_dir_path(), exist_ok=True)

    db.create_folder(message.chat.id, user_data['folder_name'])
    
    await message.reply(f'–ü–∞–ø–∫–∞ "{user_data["folder_name"]}" —Å–æ–∑–¥–∞–Ω–∞!')
    await folder_list_menu_message(message, 'start') 

@dp.callback_query_handler(remove_folder_cb.filter(), state='*')
async def delete_folder_step_1_message(call: types.CallbackQuery, callback_data: dict):
    folder_name = callback_data['folder_name']
    
    keyboard_markup = types.InlineKeyboardMarkup()
    delete_btn = types.InlineKeyboardButton('–î–∞!', callback_data=remove_folder_process_cb.new(folder_name))
    back_btn = types.InlineKeyboardButton('¬´      ', callback_data=manage_folder_cb.new(folder_name))
    keyboard_markup.row(delete_btn)
    keyboard_markup.row(back_btn)
    await call.message.edit_text(
                    f'–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–∞–ø–∫—É "{folder_name}"?\n'
                    f'–¢–∞–∫–∂–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –í–°–ï –∞—É–¥–∏–æ —Å—ç–º–ø–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –ø–∞–ø–∫–µ "{folder_name}".\n\n'
                    "<b>–í–ù–ò–ú–ê–ù–ò–ï! –≠–¢–û –î–ï–ô–°–¢–í–ò–ï –ù–ï–õ–¨–ó–Ø –û–¢–ú–ï–ù–ò–¢–¨ !!!</b>",
                    parse_mode="HTML",
                    reply_markup=keyboard_markup)
    await call.answer()

@dp.callback_query_handler(remove_folder_process_cb.filter(), state='*')
async def delete_folder_step_2_message(call: types.CallbackQuery, callback_data: dict):
    folder_name = callback_data['folder_name']
    path_list = path(call.message.chat.id, folder_name)
    # Delete all folders
    shutil.rmtree(path_list.tmp_audio_samples())
    shutil.rmtree(path_list.processed_audio_samples())
    shutil.rmtree(path_list.tmp_query_audio())
    shutil.rmtree(path_list.processed_query_audio())
    # Delete audiofingerprint database
    if os.path.exists(path_list.fingerprint_db()):
        os.remove(path_list.fingerprint_db())

    db.unregister_all_audio_sample(call.message.chat.id, folder_name)
    db.delete_folder(call.message.chat.id, folder_name)
    await call.message.edit_text(f'–ü–∞–ø–∫–∞ "{folder_name}" —É–¥–∞–ª–µ–Ω–∞!')
    await call.answer()
    await folder_list_menu_message(call.message, 'start')

@dp.callback_query_handler(manage_folder_cb.filter(), state='*')
async def manage_folder_menu_message(call: types.CallbackQuery, callback_data: dict):
    folder_name = callback_data['folder_name']
    set_selected_folder_name(call.message.chat.id, folder_name)

    keyboard_markup = types.InlineKeyboardMarkup()
    upload_audio_samples_btn = types.InlineKeyboardButton('–ó–∞–≥—Ä—É–∑–∏—Ç—å –∞—É–¥–∏–æ —Å—ç–º–ø–ª—ã', callback_data=upload_audio_sample_cb.new(folder_name))
    keyboard_markup.row(upload_audio_samples_btn)
    remove_audio_samples_btn = types.InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å –∞—É–¥–∏–æ —Å—ç–º–ø–ª—ã', callback_data=remove_audio_sample_cb.new(folder_name))
    keyboard_markup.row(remove_audio_samples_btn)
    quiz_mode_btn = types.InlineKeyboardButton('–†–µ–∂–∏–º –í–∏–∫—Ç–æ—Ä–∏–Ω—ã', callback_data=recognize_query_cb.new(folder_name))
    keyboard_markup.row(quiz_mode_btn)
    delete_btn = types.InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å –ø–∞–ø–∫y', callback_data=remove_folder_cb.new(folder_name))
    keyboard_markup.row(delete_btn)
    back_btn = types.InlineKeyboardButton('¬´      ', callback_data= 'folders_list')
    keyboard_markup.row(back_btn)

    samples_name = "".join(
        str(f"{i}) {b}\n")
        for i, b in enumerate(
            db.select_user_audio_samples_list(
                call.message.chat.id, folder_name
            ),
            1,
        )
    )

    samples_count = len(db.select_user_audio_samples_list(call.message.chat.id, folder_name))

    await call.message.edit_text(
                               f"–í—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ —Å –ø–∞–ø–∫–æ–π : {folder_name}\n\n"
                               f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—É–¥–∏–æ —Å—ç–º–ø–ª–æ–≤: {samples_count}\n"
                               f"–°–ø–∏—Å–æ–∫ –∞—É–¥–∏–æ —Å—ç–º–ª–æ–≤ :\n{samples_name}\n"
                               "–í–∞—à–∏ –¥–µ–π—Å—Ç–≤–∏—è - ", reply_markup=keyboard_markup)
    await call.answer()


@dp.callback_query_handler(upload_audio_sample_cb.filter(), state='*')
async def upload_audio_sample_message(call: types.CallbackQuery, callback_data: dict):
    folder_name = callback_data['folder_name']
    
    if len(db.select_user_audio_samples_list(call.message.chat.id, folder_name)) > 90:
        await call.answer('–°–ø–∏—Å–æ–∫ –∞—É–¥–∏–æ —Å—ç–º–ø–ª–æ–≤ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 90 —Å—ç–º–ø–ª–æ–≤', True)
        return
    
    keyboard_markup = types.InlineKeyboardMarkup()
    back_btn = types.InlineKeyboardButton('¬´      ', callback_data = manage_folder_cb.new(folder_name))
    keyboard_markup.row(back_btn)
    await call.message.edit_text(
                    f'–í—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ —Å –ø–∞–ø–∫–æ–π "{folder_name}", –≤ —Ä–µ–∂–∏–º–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ —Å—ç–º–ø–ª–æ–≤\n\n'
                    '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã - mp3, wav, wma, ogg, flac, aac, opus;\n'
                    '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ - 20–º–±. –≠—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è Telegram –±–æ—Ç–æ–≤;\n'
                    '–§–∞–π–ª—ã –Ω—É–∂–Ω–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å –ø–æ –æ–¥–Ω–æ–º—É !\n\n'
                    '–ñ–¥—É –æ—Ç —Ç–µ–±—è –∞—É–¥–∏–æ —Å—ç–º–ø–ª',
                    parse_mode="HTML", 
                    reply_markup=keyboard_markup)
    await Upload_Sample.step_1.set()
    await call.answer()

@dp.message_handler(state=Upload_Sample.step_1, content_types=types.ContentTypes.DOCUMENT | types.ContentTypes.AUDIO | types.ContentTypes.VIDEO)
async def upload_audio_sample_step_1_message(message: types.Message, state: FSMContext):
    async with state.proxy() as user_data:
        user_data['audio_sample_message'] = message
        user_data['audio_sample_content_type'] = message.content_type
        
        if user_data["audio_sample_content_type"] == "document":
            user_data['audio_sample_file_info'] = user_data["audio_sample_message"].document
            name_file = user_data["audio_sample_message"].document.file_name
        elif user_data["audio_sample_content_type"] == "audio":
            user_data['audio_sample_file_info'] = user_data["audio_sample_message"].audio
            name_file = user_data["audio_sample_message"].audio.file_name ### New in Bot API 5.0
   
        user_data['audio_sample_file_name'] = os.path.splitext(name_file)[0]
        user_data['audio_sample_file_extensions'] = os.path.splitext(name_file)[1]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
    if int(user_data["audio_sample_file_info"].file_size) >= 20871520:
        keyboard_markup = types.InlineKeyboardMarkup()
        back_btn = types.InlineKeyboardButton('¬´      ', callback_data=manage_folder_cb.new(get_selected_folder_name(message.chat.id)))
        keyboard_markup.row(back_btn)
        await message.reply('–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 20 mb. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª', reply_markup=keyboard_markup)
        return
    
    ### –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞ –≤ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–∏ —á–µ—Ä–µ–∑ db
    file_unique_id = user_data["audio_sample_file_info"].file_unique_id
    db_audio_sample_unique_name = db.check_audio_sample_with_same_file_id_in_folder(message.chat.id, get_selected_folder_name(message.chat.id), file_unique_id)
    if db_audio_sample_unique_name:
        keyboard_markup = types.InlineKeyboardMarkup()
        back_btn = types.InlineKeyboardButton('¬´      ', callback_data=manage_folder_cb.new(get_selected_folder_name(message.chat.id)))
        keyboard_markup.row(back_btn)
        await message.reply(f'–í –ø–∞–ø–∫–µ "{get_selected_folder_name(message.chat.id)}" —ç—Ç–æ—Ç –∞—É–¥–∏–æ —Å—ç–º–ø–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ø–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º "{db_audio_sample_unique_name[0]}"\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª', reply_markup=keyboard_markup)
        return
     
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    if user_data["audio_sample_file_extensions"].lower() in ('.aac','.wav', '.mp3', '.wma', '.ogg', '.flac', '.opus'):
        await Upload_Sample.step_2.set()
        
        keyboard_markup = types.InlineKeyboardMarkup()
        back_btn = types.InlineKeyboardButton('¬´      ', callback_data=manage_folder_cb.new(get_selected_folder_name(message.chat.id)))
        keyboard_markup.row(back_btn)
        await message.reply(
                        f'–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞ : <code>{user_data["audio_sample_file_name"]}</code>\n\n'
                        '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ —Å—ç–º–ø–ª–∞. –≠—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—Å—è –≤–æ –≤—Ä–µ–º—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã',
                        parse_mode="HTML",
                        reply_markup=keyboard_markup)
    elif not user_data["audio_sample_file_extensions"]:
        keyboard_markup = types.InlineKeyboardMarkup()
        back_btn = types.InlineKeyboardButton('¬´      ', callback_data=manage_folder_cb.new(get_selected_folder_name(message.chat.id)))
        keyboard_markup.row(back_btn)
        await message.reply('–ú—ã –Ω–µ –º–æ–∂–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç –∞—É–¥–∏–æ –∑–∞–ø–∏—Å–∏. –í–æ–∑–º–æ–∂–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω–æ–µ.\n–ò–∑–º–µ–Ω–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –Ω–∞ –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫—É—é –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –µ—â–µ —Ä–∞–∑', reply_markup=keyboard_markup)
        return
    else:
        keyboard_markup = types.InlineKeyboardMarkup()
        back_btn = types.InlineKeyboardButton('¬´      ', callback_data=manage_folder_cb.new(get_selected_folder_name(message.chat.id)))
        keyboard_markup.row(back_btn)
        await message.reply(f'–ú—ã "{user_data["audio_sample_file_extensions"]}" —Ñ–æ—Ä–º–∞—Ç –Ω–µ –ø—Ä–∏–Ω–µ–º–∞–µ–º, –ø—Ä–∏—à–ª–∏—Ç–µ –≤ –¥—Ä—É–≥–æ–º —Ñ–æ—Ä–º–∞—Ç–µ\n\n', reply_markup=keyboard_markup)
        return

@dp.message_handler(state= Upload_Sample.step_2, content_types=types.ContentTypes.TEXT)
async def upload_audio_sample_step_2_message(message: types.Message, state: FSMContext):
    async with state.proxy() as user_data:
        user_data['audio_sample_name'] = message.text.replace('\n',' ')
        
    file_id = user_data["audio_sample_file_info"].file_id
    audio_sample_name = f'{user_data["audio_sample_name"]}'
    audio_sample_full_name = f'{user_data["audio_sample_name"]}{user_data["audio_sample_file_extensions"]}'
    path_list = path(message.chat.id, get_selected_folder_name(message.chat.id))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ —Å—ç–º–ø–ª–∞
    if len(user_data["audio_sample_name"]) >= 90:
        keyboard_markup = types.InlineKeyboardMarkup()
        back_btn = types.InlineKeyboardButton('¬´      ', callback_data =manage_folder_cb.new(get_selected_folder_name(message.chat.id)))
        keyboard_markup.row(back_btn)
        await message.reply('–ù–∞–∑–≤–∞–Ω–∏–µ —Å—ç–º–ø–ª–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 90 —Å–∏–º–≤–æ–ª–æ–≤, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è', reply_markup=keyboard_markup)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–æ–∫—É –Ω–∞ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
    if check_string_for_except_chars(user_data["audio_sample_name"]):
        keyboard_markup = types.InlineKeyboardMarkup()
        back_btn = types.InlineKeyboardButton('¬´      ', callback_data = manage_folder_cb.new(get_selected_folder_name(message.chat.id)))
        keyboard_markup.row(back_btn)
        await message.reply(f'–ù–∞–∑–≤–∞–Ω–∏–µ —Å—ç–º–ø–ª–∞ "{user_data["audio_sample_name"]}" —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã: {check_string_for_except_chars(audio_sample_name)}\n–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è', reply_markup=keyboard_markup)
        return 
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∞—É–¥–∏–æ —Å—ç–º–ø–ª —Å —Ç–∞–∫–∏–º –∂–µ –Ω–∞–∑–≤–∞–Ω–∏–µ–º
    if str(user_data["audio_sample_name"]).lower() in [x.lower() for x in db.select_user_audio_samples_list(message.chat.id, get_selected_folder_name(message.chat.id))]:
        keyboard_markup = types.InlineKeyboardMarkup()
        back_btn = types.InlineKeyboardButton('¬´      ', callback_data = manage_folder_cb.new(get_selected_folder_name(message.chat.id)))
        keyboard_markup.row(back_btn)
        await message.reply("–ê—É–¥–∏–æ —Å—ç–º–ø–ª —Å —Ç–∞–∫–∏–º –∂–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è", reply_markup=keyboard_markup)
        return
     
    await state.finish()
    managment_msg = await message.reply('–ó–∞–¥–∞—á–∞ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤ –ø–æ—Ç–æ–∫!')
    
    try:
        # Stage 0 : download file
        managment_msg = await download_file(managment_msg, file_id, path_list.tmp_audio_samples(audio_sample_full_name))
        # Stage 1 : check audio files for integrity and mormalize, convert them
        managment_msg = await audio_processing(managment_msg, path_list.tmp_audio_samples(audio_sample_full_name), path_list.processed_audio_samples(audio_sample_name + ".mp3"))
        # Stage 2 : analyze current audio sample hashes
        managment_msg = await register_audio_hashes(managment_msg, path_list.processed_audio_samples(audio_sample_name + ".mp3"), path_list.fingerprint_db())
        # Stage 3 : register current audio sample hashes
        db.register_audio_sample(message.chat.id, get_selected_folder_name(message.chat.id), user_data["audio_sample_name"], user_data["audio_sample_file_info"].file_unique_id)
    except Exception as ex:
        logging.exception(ex)
        keyboard_markup = types.InlineKeyboardMarkup()
        manage_folder_menu_message_btn = types.InlineKeyboardButton('¬´ –í–µ—Ä–Ω—É—Ç—Å—è –∫ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–µ', callback_data = manage_folder_cb.new(get_selected_folder_name(message.chat.id)))
        upload_sample_btn = types.InlineKeyboardButton('¬ª –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—ç–º–ø–ª', callback_data = upload_audio_sample_cb.new(get_selected_folder_name(message.chat.id)))
        keyboard_markup.row(manage_folder_menu_message_btn)
        keyboard_markup.row(upload_sample_btn)
        await message.reply(f'–í–æ –≤—Ä–µ–º–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ —Å—ç–º–ø–ª–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º "{user_data["audio_sample_name"]}" –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞', reply_markup=keyboard_markup)
    else:
        keyboard_markup = types.InlineKeyboardMarkup()
        manage_folder_menu_message_btn = types.InlineKeyboardButton('¬´ –í–µ—Ä–Ω—É—Ç—Å—è –∫ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–µ', callback_data = manage_folder_cb.new(get_selected_folder_name(message.chat.id)))
        upload_sample_btn = types.InlineKeyboardButton('¬ª –ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω —Å—ç–º–ø–ª', callback_data = upload_audio_sample_cb.new(get_selected_folder_name(message.chat.id)))
        keyboard_markup.row(manage_folder_menu_message_btn)
        keyboard_markup.row(upload_sample_btn)
        await message.reply(f'–ê—É–¥–∏–æ —Å—ç–º–ø–ª —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º "{user_data["audio_sample_name"]}" —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω', reply_markup=keyboard_markup)
    finally:
        os.remove(path_list.tmp_audio_samples(audio_sample_full_name))
        os.remove(path_list.processed_audio_samples(audio_sample_name + ".mp3"))

@dp.callback_query_handler(remove_audio_sample_cb.filter(), state='*')
async def remove_audio_sample_message(call: types.CallbackQuery, callback_data: dict, state: FSMContext):
    folder_name = callback_data['folder_name']
    
    if len(db.select_user_audio_samples_list(call.message.chat.id, folder_name)) == 0:
        await call.answer(f'–í –ø–∞–ø–∫–µ "{folder_name}" –Ω–µ—Ç—É –∞—É–¥–∏–æ —Å—ç–º–ª–æ–≤', True)
        return
    
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    keyboard.add("<<< –û—Ç–º–µ–Ω–∞ >>>")
    for audio_sample_name in db.select_user_audio_samples_list(call.message.chat.id, get_selected_folder_name(call.message.chat.id)):
        keyboard.add(audio_sample_name)
    
    await call.message.delete()
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∞—É–¥–∏–æ —Å—ç–º–ø–ª –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:", reply_markup=keyboard)
    await RemoveSample.step_1.set()
    await call.answer()
    
@dp.message_handler(state=RemoveSample.step_1, content_types=types.ContentTypes.TEXT)
async def remove_audio_sample_step_1_message(message: types.Message, state: FSMContext):
    async with state.proxy() as user_data:
        user_data['chosen_sample'] = message.text
    await state.finish()
    path_list = path(message.chat.id, get_selected_folder_name(message.chat.id))
   
    if user_data['chosen_sample'] == "<<< –û—Ç–º–µ–Ω–∞ >>>":
        keyboard_markup = types.InlineKeyboardMarkup()
        manage_folder_menu_message_btn = types.InlineKeyboardButton('¬´ –í–µ—Ä–Ω—É—Ç—Å—è –∫ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–µ', callback_data = manage_folder_cb.new(get_selected_folder_name(message.chat.id)))
        upload_sample_btn = types.InlineKeyboardButton('¬ª –£–¥–∞–ª–∏—Ç—å –∞—É–¥–∏–æ —Å—ç–º–ø–ª  ', callback_data = remove_audio_sample_cb.new(get_selected_folder_name(message.chat.id)))
        keyboard_markup.row(manage_folder_menu_message_btn)
        keyboard_markup.row(upload_sample_btn)
        await message.reply('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—é', reply_markup=keyboard_markup)
        return 
    
    managment_msg = await message.reply('–ó–∞–¥–∞—á–∞ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤ –ø–æ—Ç–æ–∫!')

    try:
        if len(db.select_user_audio_samples_list(message.chat.id, get_selected_folder_name(message.chat.id))) == 1:
            os.remove(path_list.fingerprint_db())
        else:
            await delete_audio_hashes(managment_msg, path_list.fingerprint_db(), path_list.processed_audio_samples(user_data['chosen_sample'] + ".mp3"))
        db.unregister_audio_sample(message.chat.id, get_selected_folder_name(message.chat.id), user_data['chosen_sample'])
    except Exception as ex:
        logging.exception(ex)
        keyboard_markup = types.InlineKeyboardMarkup()
        manage_folder_menu_message_btn = types.InlineKeyboardButton('¬´ –í–µ—Ä–Ω—É—Ç—Å—è –∫ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–µ', callback_data = manage_folder_cb.new(get_selected_folder_name(message.chat.id)))
        upload_sample_btn = types.InlineKeyboardButton('¬ª –£–¥–∞–ª–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω —Å—ç–º–ø–ª  ', callback_data = remove_audio_sample_cb.new(get_selected_folder_name(message.chat.id)))
        keyboard_markup.row(manage_folder_menu_message_btn)
        keyboard_markup.row(upload_sample_btn)
        await message.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫', reply_markup=keyboard_markup)
    else:        
        keyboard_markup = types.InlineKeyboardMarkup()
        manage_folder_menu_message_btn = types.InlineKeyboardButton('¬´ –í–µ—Ä–Ω—É—Ç—Å—è –∫ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–µ', callback_data = manage_folder_cb.new(get_selected_folder_name(message.chat.id)))
        upload_sample_btn = types.InlineKeyboardButton('¬ª –£–¥–∞–ª–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω —Å—ç–º–ø–ª  ', callback_data = remove_audio_sample_cb.new(get_selected_folder_name(message.chat.id)))
        keyboard_markup.row(manage_folder_menu_message_btn)
        keyboard_markup.row(upload_sample_btn)
        await message.reply(f'–ê—É–¥–∏–æ —Å—ç–º–ø–ª —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º "{user_data["chosen_sample"]}" —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω', reply_markup=keyboard_markup)


@dp.callback_query_handler(recognize_query_cb.filter(), state='*')
async def recognize_query_message(call: types.CallbackQuery, callback_data: dict):
    folder_name = callback_data['folder_name']
    
    if len(db.select_user_audio_samples_list(call.message.chat.id, folder_name)) == 0:
        await call.answer(f'–í –ø–∞–ø–∫–µ "{folder_name}" –Ω–µ—Ç—É –∞—É–¥–∏–æ —Å—ç–º–ª–æ–≤', True)
        return
    
    keyboard_markup = types.InlineKeyboardMarkup()
    back_btn = types.InlineKeyboardButton('¬´      ', callback_data = manage_folder_cb.new(folder_name))
    keyboard_markup.row(back_btn)
    await call.message.edit_text(
                    f'–í—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ —Å –ø–∞–ø–∫–æ–π "{folder_name}", –≤ —Ä–µ–∂–∏–º–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã\n\n'
                    "<i>–ñ–¥—É –æ—Ç —Ç–µ–±—è –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</i>",
                    parse_mode="HTML", 
                    reply_markup=keyboard_markup)
    await UploadQuery.step_1.set()
    await call.answer()

@dp.message_handler(state=UploadQuery.step_1, content_types=types.ContentTypes.VOICE | types.ContentTypes.AUDIO)
async def recognize_query_step_1_message(message: types.Message, state: FSMContext):
    random_str = generate_random_string(32)
    path_list = path(message.chat.id, get_selected_folder_name(message.chat.id))
    
    if message.content_type == "voice":
        file_id = message.voice.file_id
        if message.voice.mime_type == "audio/ogg":
            query_audio_file_extensions =  ".ogg"
        else:
             query_audio_file_extensions =  ".NULL"
            #await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...", True)
    elif message.content_type == "audio":
        file_id = message.audio.file_id
        name_file = message.audio.file_name ### New in Bot API 5.0
        query_audio_file_extensions = os.path.splitext(name_file)[1]
    
    if query_audio_file_extensions.lower() not in ('.aac','.wav', '.mp3', '.wma', '.ogg', '.flac', '.opus'):
        keyboard_markup = types.InlineKeyboardMarkup()
        back_btn = types.InlineKeyboardButton('¬´      ', callback_data=manage_folder_cb.new(get_selected_folder_name(message.chat.id)))
        keyboard_markup.row(back_btn)
        await message.reply('–ú—ã –Ω–µ –º–æ–∂–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç –∞—É–¥–∏–æ –∑–∞–ø–∏—Å–∏ –∏–ª–∏ –º—ã –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –µ–≥–æ. –í–æ–∑–º–æ–∂–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω–æ–µ.\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –µ—â–µ —Ä–∞–∑', reply_markup=keyboard_markup)
        return
    
    query_audio_full_name= f"{random_str}{query_audio_file_extensions}"
    query_audio_name = f"{random_str}"
    
    await state.finish()
    managment_msg = await message.reply('–ó–∞–¥–∞—á–∞ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤ –ø–æ—Ç–æ–∫!')
    
    try:
        # Stage 0 : download file
        managment_msg = await download_file(managment_msg, file_id, path_list.tmp_query_audio(query_audio_full_name))
        # Stage 1 : check audio files for integrity and mormalize, convert them
        managment_msg = await audio_processing(managment_msg, path_list.tmp_query_audio(query_audio_full_name), path_list.processed_query_audio(query_audio_name + ".mp3"))
        # Stage 2 : match audio query
        managment_msg = await match_audio_query(managment_msg, path_list.processed_query_audio(query_audio_name + ".mp3"), path_list.fingerprint_db())
    except:
        await folder_list_menu_message(message, 'start')
        return
    else:
        keyboard_markup = types.InlineKeyboardMarkup()
        manage_folder_menu_message_btn = types.InlineKeyboardButton('¬´ –í–µ—Ä–Ω—É—Ç—Å—è –∫ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–µ  ', callback_data=manage_folder_cb.new(get_selected_folder_name(message.chat.id)))
        upload_sample_btn = types.InlineKeyboardButton('¬ª –†–∞—Å–ø–æ–∑–Ω–∞—Ç—å –µ—â–µ –æ–¥–Ω—É –∑–∞–ø–∏—Å—å', callback_data=recognize_query_cb.new(get_selected_folder_name(message.chat.id)))
        keyboard_markup.row(manage_folder_menu_message_btn)
        keyboard_markup.row(upload_sample_btn)
        await message.reply('–ê—É–¥–∏–æ –∑–∞–ø–∏—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞', reply_markup=keyboard_markup)
    finally:
        os.remove(path_list.tmp_query_audio(query_audio_full_name))
        os.remove(path_list.processed_query_audio(query_audio_name + ".mp3"))
        
@dp.message_handler(commands=['help'], state='*')
async def process_help_command_1(message: types.Message, messaging_type = "start"):
    message_text = """<b>–í–≤–µ–¥–µ–Ω–∏–µ</b>

<code>LenDejavuBot</code> - –±–æ—Ç –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –º—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö –≤–∏–∫—Ç–æ—Ä–∏–Ω. –ë–æ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è –ü–∞–≤–ª–æ–¥–∞—Ä—Å–∫–æ–≥–æ –º—É–∑—ã–∫–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–ª–µ–¥–∂–∞. –†–∞–∑–º–µ—Ä –∑–∞–≥—Ä—É–∂–∞–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ 20 –ú–ë, —ç—Ç–æ—Ç –ª–∏–º–∏—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¢–µ–ª–µ–≥—Ä–∞–º–æ–º –¥–ª—è –±–æ—Ç–æ–≤, —è –Ω–∏—á–µ–≥–æ –Ω–µ –º–æ–≥—É —Å —ç—Ç–∏–º –ø–æ–¥–µ–ª–∞—Ç—å.

–í –º—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö –∑–∞–≤–µ–¥–µ–Ω–∏—è—Ö, –∫—Ä–æ–º–µ —Ç–µ–æ—Ä–∏–∏ –∏ –ø—Ä–∞–∫—Ç–∏–∫–∏, –∏ –∏–∑—É—á–µ–Ω–∏–∏ –∫–æ–º–ø–æ–∑–∏—Ç–æ—Ä–æ–≤, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å –Ω–∞–∏–∑—É—Å—Ç—å –≤—Å–µ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∫–æ–º–ø–æ–∑–∏—Ç–æ—Ä–∞, –∞ —Ç–∞–∫–∂–µ –∫–∞–∫ –æ–Ω–∏ –∑–≤—É—á–∞—Ç. –ò —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤ –∫–∞–∫–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —É—á–∞—â–∏–π—Å—è –∑–Ω–∞—é—Ç –Ω–∞–∏–∑—É—Å—Ç—å –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è, —É—á–∏—Ç–µ–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ —É—Å—Ç—Ä–∞–∏–≤–∞—é—Ç –º—É–∑—ã–∫–∞–ª—å–Ω—ã–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã. –î–ª—è —ç—Ç–æ–≥–æ —É—á–∏—Ç–µ–ª—è –∑–∞—Ä–∞–Ω–µ–µ –¥–æ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –¥–∞—é—Ç —É—á–∞—â–∏–º—Å—è –∞—É–¥–∏–æ –∑–∞–ø–∏—Å–∏ –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –Ω–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ. –í –ø—Ä–∏–Ω—Ü–∏–ø–µ, –≤—ã—É—á–∏—Ç—å 5-10 –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏ –Ω–µ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ç—Ä—É–¥–∞. –ù–æ –±—ã–≤–∞–µ—Ç —á—Ç–æ —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–∏–≥–∞–µ—Ç –¥–æ 40 (!) –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏, —á—Ç–æ –Ω–µ —Ç–∞–∫ –ø—Ä–æ—Å—Ç–æ, –¥–∞ –∏ –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å –Ω–µ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏, –Ω–æ –∏ –∫–æ–º–ø–æ–∑–∏—Ç–æ—Ä–∞, –∫–∞–∫–∞—è —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –æ—Ç–∫—É–¥–∞ (–∫–∞–∫–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ, —á–∞—Å—Ç—å –∏–ª–∏ –∞–∫—Ç). –≠—Ç–æ –µ—â–µ –Ω–∞—á–∞–ª–æ —á—Ç–æ —è –æ–∑–≤—É—á–∏–ª, –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —É—á–∏—Ç–µ–ª—è –Ω–∞–ø—Ä–∏–º–µ—Ä –Ω–µ —Å–Ω–∞—á–∞–ª–∞ —Å—Ç–∞–≤—è—Ç –∑–∞–ø–∏—Å—å, –∞ –¥–æ–ø—É—Å—Ç–∏–º —Å —Å–µ—Ä–µ–¥–∏–Ω—ã. –¢—É—Ç Shazam, —Å–æ —Å–≤–æ–µ–π –±–∞–∑–æ–π –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏ –Ω–µ –ø–æ–º–æ–∂–µ—Ç, –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–≤–æ—é –≥–∏–±–∫—É—é –±–∞–∑—É —Å –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è–º–∏.

<b>–ü—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç –±–æ—Ç–∞:</b>
1&gt; –í—ã –∑–∞–≥—Ä—É–∂–∞–µ—Ç–µ –º–Ω–µ –≤ –ø–∞–ø–∫—É –∞—É–¥–∏–æ –∑–∞–ø–∏—Å—å –∫–æ—Ç–æ—Ä—ã–π –¥–∞–ª –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ 
2&gt; –í–æ –≤—Ä–µ–º—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –≤—ã –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –≤ –ø–∞–ø–∫—É, –≤–∫–ª—é—á–∞–µ—Ç–µ –†–µ–∂–∏–º –í–∏–∫—Ç–æ—Ä–∏–Ω—ã, –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ –∞—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∏–∫—Ç–æ—Ä–∏–Ω–æ–π –∏ —è –≤–∞–º –≤—ã–¥–∞—é –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏

<i>–ü—Ä–æ–π–¥–∏—Ç–µ –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ–±–æ –º–Ω–µ –∏ –∑–Ω–∞—Ç—å, –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ–Ω—è.</i>"""

    keyboard_markup = types.InlineKeyboardMarkup()
    next_btn = types.InlineKeyboardButton('¬ª –î–∞–ª–µ–µ', callback_data="process_help_command_2")
    keyboard_markup.row(next_btn)
    if messaging_type == "start":
        await message.reply(message_text, reply_markup=keyboard_markup, parse_mode="HTML")
    elif messaging_type == "edit":
        await message.edit_text(message_text, reply_markup=keyboard_markup, parse_mode="HTML")

async def process_help_command_2(message: types.Message):
    message_text = """<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ</b>

<i>–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞, –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É </i><i>/start</i>

<b># –ó–∞–≥—Ä—É–∑–∫–∞ –∞—É–¥–∏–æ –∑–∞–ø–∏—Å–µ–π
</b>0&gt; –û—Ç–∫—Ä–æ–π—Ç–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –µ—Å–ª–∏ —ç—Ç–æ –º–µ–Ω—é –Ω–µ –æ—Ç–∫—Ä—ã—Ç–∞
1&gt; –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –º–µ–Ω—é "–ü–∞–ø–∫–∏" –∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –ø–∞–ø–∫—É
2&gt; –ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–æ–Ω—è—Ç–Ω–æ–µ –¥–ª—è –í–∞—Å –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ
3&gt; –û—Ç–∫—Ä–æ–π—Ç–µ —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–æ–∑–¥–∞–Ω–Ω—É—é –ø–∞–ø–∫—É, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –º–µ–Ω—é "–ó–∞–≥—Ä—É–∑–∏—Ç—å –∞—É–¥–∏–æ —Å—ç–º–ø–ª—ã" –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª–æ–º –º–Ω–µ –∞—É–¥–∏–æ –∑–∞–ø–∏—Å—å, –∫–æ—Ç–æ—Ä—É—é –¥–∞–ª –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ
<i>–í–Ω–∏–º–∞–Ω–∏–µ! –§–∞–π–ª—ã –Ω—É–∂–Ω–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å –ø–æ –æ–¥–Ω–æ–º—É, –∞ —Ç–∞–∫–∂–µ —Ä–∞–∑–º–µ—Ä –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 20 –º–±</i>
4&gt; –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ –∑–∞–ø–∏—Å–∏ –ø–æ –í–∞—à–µ–º—É —É—Å–º–æ—Ç—Ä–µ–Ω–∏—é, —ç—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤–æ –≤—Ä–µ–º—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
5&gt; –ì–æ—Ç–æ–≤–æ!

<b># –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã</b>
0&gt; –û—Ç–∫—Ä–æ–π—Ç–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –µ—Å–ª–∏ —ç—Ç–æ –º–µ–Ω—é –Ω–µ –æ—Ç–∫—Ä—ã—Ç–∞
1&gt; –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –º–µ–Ω—é "–ü–∞–ø–∫–∏"
2&gt; –û—Ç–∫—Ä–æ–π—Ç–µ —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–æ–∑–¥–∞–Ω–Ω—É—é –ø–∞–ø–∫—É, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –º–µ–Ω—é "–†–µ–∂–∏–º –í–∏–∫—Ç–æ—Ä–∏–Ω—ã" –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª–æ–º –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ—Ç—Ä—ã–≤–æ–∫ –∏–∑ –º—É–∑—ã–∫–∞–ª—å–Ω–æ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã, –∏ –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–∫–∞ –Ω–µ –≤—ã–π–¥–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
3&gt; –ì–æ—Ç–æ–≤–æ!"""

    keyboard_markup = types.InlineKeyboardMarkup()
    back_btn = types.InlineKeyboardButton('¬´ –ù–∞–∑–∞–¥', callback_data="process_help_command_1")
    next_btn = types.InlineKeyboardButton('¬ª –î–∞–ª–µ–µ', callback_data="process_help_command_3")
    keyboard_markup.row(back_btn, next_btn)
    await message.edit_text(message_text, reply_markup=keyboard_markup, parse_mode="HTML")

async def process_help_command_3(message: types.Message):
    message_text = """<b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∞—É–¥–∏–æ –∑–∞–ø–∏—Å–µ–π:</b>
&gt;*.ogg
&gt;*.mp3
&gt;*.acc
&gt;*.wav
&gt;*.wma
&gt;*.flac
&gt;*.opus

<i>–ù–µ—Ç—É —Ñ–æ—Ä–º–∞—Ç–∞ –≤ –∫–æ—Ç–æ—Ä–æ–º —É —Ç–µ–±—è –∞—É–¥–∏–æ –∑–∞–ø–∏—Å—å? –ù–µ –ø—Ä–æ–±–ª–µ–º–∞, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É –æ–± —ç—Ç–æ–º: </i><i>@Zhymabek_Roman</i>"""

    keyboard_markup = types.InlineKeyboardMarkup()
    back_btn = types.InlineKeyboardButton('¬´ –ù–∞–∑–∞–¥', callback_data="process_help_command_2")
    next_btn = types.InlineKeyboardButton('¬ª –î–∞–ª–µ–µ', callback_data="process_help_command_4")
    keyboard_markup.row(back_btn, next_btn)
    await message.edit_text(message_text, reply_markup=keyboard_markup, parse_mode="HTML")

async def process_help_command_4(message: types.Message):
    message_text = """<b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>

<i>&gt; –í —Å–ª—É—á–∞–µ –µ—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã –ø–æ –±–æ—Ç—É, –∏–ª–∏ –µ—Å—Ç—å –ø–æ–∂–µ–ª–∞–Ω–∏–µ –∏–ª–∏ –∂–µ —Ö–æ—Ç–µ–ª–∫–∏, –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É –æ–± —ç—Ç–æ–º: </i><i>@Zhymabek_Roman</i>"""

    keyboard_markup = types.InlineKeyboardMarkup()
    back_btn = types.InlineKeyboardButton('¬´ –ù–∞–∑–∞–¥', callback_data="process_help_command_3")
    next_btn = types.InlineKeyboardButton('–ì–æ—Ç–æ–≤–æ!', callback_data="welcome_message")
    keyboard_markup.row(back_btn, next_btn)
    await message.edit_text(message_text, reply_markup=keyboard_markup, parse_mode="HTML")

@dp.errors_handler(exception=BotBlocked)
async def error_bot_blocked(update: types.Update, exception: BotBlocked):
    logging.warning(f"–ú–µ–Ω—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!\n–°–æ–æ–±—â–µ–Ω–∏–µ: {update}\n–û—à–∏–±–∫–∞: {exception}")
    return True

@dp.errors_handler(exception=MessageNotModified)
async def message_not_modified_handler(update: types.Update, exception: BotBlocked):
    return True

@dp.message_handler(content_types=types.ContentType.ANY, state='*')
async def unknown_message(msg: types.Message):
    await msg.reply('–Ø –Ω–µ –∑–Ω–∞—é, —á—Ç–æ —Å —ç—Ç–∏–º –¥–µ–ª–∞—Ç—å\n–Ø –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–æ–º–Ω—é, —á—Ç–æ –µ—Å—Ç—å –∫–æ–º–∞–Ω–¥–∞ /help')

@dp.callback_query_handler(state='*')
async def callback_handler(query: types.CallbackQuery, state):
    answer_data = query.data
    if answer_data == 'welcome_message':
        await query.answer()
        await main_menu_message(query.message, 'edit')
    if answer_data == 'edit_lang':
        await query.answer()
        await language_settings_message(query.message, 'edit')
    if answer_data == 'folders_list':
        await state.finish()
        await query.answer()
        await folder_list_menu_message(query.message, 'edit')
    if answer_data == 'create_new_folder':
        if int(db.user_folders_count(query.message.chat.id)) >= 10:
            await query.answer('–°–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 10 –ø–∞–ø–æ–∫', True)
            return
        await query.answer()
        await create_folder_step_1_message(query.message)
    if answer_data == 'process_help_command_1':
        await query.answer()
        await process_help_command_1(query.message, "edit")
    if answer_data == 'process_help_command_2':
        await query.answer()
        await process_help_command_2(query.message)
    if answer_data == 'process_help_command_3':
        await query.answer()
        await process_help_command_3(query.message)
    if answer_data == 'process_help_command_4':
        await query.answer()
        await process_help_command_4(query.message)

def on_shutdown(dispatcher):
    global curent_folder_name
    logging.info("Saving curent folder data to file...")
    with open(config.VARIABLES_FILE_STORAGE, 'wb') as f:
        pickle.dump(curent_folder_name, f)

def on_startup(dispatcher):
    global curent_folder_name
    logging.info("Restoring curent folder data from file...")
    with open(config.VARIABLES_FILE_STORAGE, 'rb') as f:
        curent_folder_name = pickle.load(f)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, on_startup=async_wrap(on_startup), on_shutdown=async_wrap(on_shutdown))
